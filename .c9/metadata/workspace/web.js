{"changed":true,"filter":false,"title":"web.js","tooltip":"/web.js","value":"'use strict';\n\nvar services     = require(\"./src/backend/config/serviceConfig\").services,\n    sm           = require(\"./src/backend/service/manager\")(services);\n\nvar app          = sm.get('app'),\n    cluster      = sm.get('cluster'),\n    fs           = sm.get('fs'),\n    //var User         = sm.get('users');\n    bodyParser   = require('body-parser'),\n    mongoose     = sm.get('mongoose'),\n    User         = require(\"./src/backend/models/user\"),\n    Beer         = require('./src/backend/models/beer'),\n    //var serialPort = sm.get('serial')(sm.get('config').Serial.port);  //COM3\n    arduinoModel = sm.get('arduinomodel'),\n    routes       = sm.get('routes'),\n    server       = sm.get('httpServer'),\n    io           = sm.get('io'),\n    port         = sm.get('config').port,\n    MongoClient  = sm.get('mongoClient'),\n    when         = sm.get('when'),\n    express      = sm.get('express'),\n    session      = require('express-session'),\n    flash        = require('connect-flash'),\n    path         = require('path');\n\n\n//------------------------------------------------ GLOBAL VARIABLES--------------------------------------------------*/\n// var controllers  = [], \n    // clients      = [];\n\n//------------------------------------------------ PASSPORT AUTH SETTINGS -----------------------------------//\n\nvar passport     = require('passport'),\n    LocalStrategy = require('passport-local').Strategy;\n    require(\"./src/backend/config/passport\")(passport);\n\n\n//-------------------------------------------------DATABASE CONNECTION-----------------------------------//\nmongoose.connect(sm.get('config').mongoDb.uri);\nvar db = mongoose.connection;\n\ndb.on('error', function () {\n  throw new Error('unable to connect to database at ' + sm.get('config').mongoDb.uri);\n});    \n    \n//----------------------------------------------------APP SETTINGS------------------------------------------//\napp.set('views', __dirname + '/src/front/views');\napp.use('/api',express.static(__dirname + '/src/front'));   \n// app.use('/views', express.static(__dirname + '/src/front/views'));\napp.set('view engine', 'ejs');\n\n// TODO to be removed    \n// fs.readdirSync('./src/backend/controllers').forEach(function (file) {   //TODO get rid of sync\n    // if (file.substr(-3) === '.js') {\n        // console.log(\"controller:\", file);\n        // var name = file.substr(0,file.length - 3);\n        // controllers[name] = {name: name, value: require('./src/backend/controllers/'+ file)};\n        //controllers[name].run();\n    // }\n    \n// });    \n\n// //----------------------------------------------- SOCKETS -----------------------------------------------//\nrequire('./src/backend/sockets.js')(io(server));\n\n//---------------------------------------------------ENVIRONMET SETTINGS--------------------------------------------------------//\nvar env = process.env.NODE_ENV || 'development';\nif ('development' === env) {\n    // configure stuff here\n    console.log('configure stuff here..');\n}\n//---------------------------------------------------CONTROLLERS-----------------------------------------------------------------//\n\nvar authController    = require('./src/backend/controllers/auth'),\n    beerController    = require('./src/backend/controllers/beer'),\n    userController    = require('./src/backend/controllers/users'),\n    todoController    = require('./src/backend/controllers/todo'),\n    arduinoController = require('./src/backend/controllers/arduino');\n    \n\n// var ardu = arduinoController();\n// console.log(ardu.getName());\n//ROUTES-------------------------------------------TODO move to controlleers-------------------------------------------------//\n\n/*    \napp.all('/users*', function(req,res,next){\n    //userController.run(req,res,next,MongoClient);\n});\n*/\n\nfunction ensureAuthenticated(req, res, next) {\n  if (req.isAuthenticated()) { return next(); }\n   req.session.messages = \"You need to login to view this page\";\n   res.redirect('/api/login');\n}\n\n  // route middleware to make sure a user is logged in\nfunction isLoggedIn(req, res, next) {\n\n    // if user is authenticated in the session, carry on \n    if (req.isAuthenticated())\n        return next();\n    // if they aren't redirect them to the home page\n    res.redirect('/api/login');\n}\n\nvar router = express.Router();\n\n\n// middleware to use for all requests\nrouter.use(function(req, res, next) {\n    // do logging\n    console.log('Something is happening.');\n    next(); // make sure we go to the next routes and don't stop here\n});\n\nrouter.route('/about')\n    .get(ensureAuthenticated, routes.about.dummyFunction);\n//     //.get(routes.about.dummyFunction) ...\n\n\nrouter.route('/admin')\n     .get(ensureAuthenticated, routes.admin);\n     ////adminController().run(req,res,next);\n    \nrouter.route('/home')\n    .get(ensureAuthenticated, routes.home);\n    // .get(ensureAuthenticated, function(req, res, next){\n    //   res.render('home', {title: 'home route'}); \n    // });\n    \n router.route('/arduino')\n     .get(ensureAuthenticated, routes.arduino);\n     \n\n router.route('/portfolio')\n     .get(ensureAuthenticated, routes.portfolio);\n\n// router.route('/projects')\n    // .get(ensureAuthenticated, function(req, res, next){\n    //   res.render('projects', {title: 'projects route'}); \n    // });\n    \n router.get('/angular',ensureAuthenticated, function(req,res){\n     User.find(function(err, users){\n       if (err)\n             res.send(err);\n             console.log(users);\n       res.json(users);\n     });\n });\n\n\nrouter.route('/login')\n    .get(routes.login);\n    \nrouter.route('/signup')\n    .get(routes.signup);    \n    \nrouter.route('/login')\n    .get(routes.login)\n    .post(passport.authenticate('local-login', { \n        successRedirect: '/api/index',\n        failureRedirect: '/api/login' }));\n    \n\n// // process the signup form\n// router.route('/signup')\n    //  .post(passport.authenticate('local-signup', {\n        //  successRedirect : '/arduino', // redirect to the secure profile section\n        //  failureRedirect : '/signup', // redirect back to the signup page if there is an error\n        //  failureFlash : true // allow flash messages\n    //  }));\n\n\nrouter.route('/index')\n    .get(ensureAuthenticated, routes.index);\n//     .get(function(req,res){\n//         res.json(\"index page\");\n//     })\n\n// // Create endpoint handlers for /beers\nrouter.route('/beers')\n  .post(ensureAuthenticated, beerController.postBeers)\n  .get( ensureAuthenticated, beerController.getBeers);\n\n// // Create endpoint handlers for /beers/:beer_id\nrouter.route('/beers/:beer_id')\n  .get(authController.isAuthenticated, beerController.getBeer)\n  .put(authController.isAuthenticated, beerController.putBeer)\n  .delete(authController.isAuthenticated, beerController.deleteBeer);\n\n// Create endpoint handlers for /users\nrouter.route('/users')\n  .post( userController.postUsers)\n  .get( userController.getUsers);\n\n//create endpoint handlers for /users/:user_id \nrouter.route('/users/:user_id')\n    .get(authController.isAuthenticated, userController.getUser)\n    .put(authController.isAuthenticated, userController.putUser)\n    .delete(authController.isAuthenticated, userController.deleteUser);\n\n// //create endpoint handlers for /todo  \n// router.route('/todos')\n//     .post(ensureAuthenticated, todoController.postTodo)\n//     .get(ensureAuthenticated, todoController.getTodos);\n\nrouter.route('/logout')\n    .get(function(req, res) {\n        req.logout();\n        res.redirect('/api/login');\n    });\n\nrouter.route('/')\n    .get(routes.login);\n\n// =====================================\n// TWITTER ROUTES ======================\n// =====================================\n// route for twitter authentication and login\nrouter.route('/auth/twitter')\n    .get(passport.authenticate('twitter'));\n\n// handle the callback after twitter has authenticated the user\nrouter.route('/auth/twitter/callback')\n    .get(passport.authenticate('twitter', {\n            successRedirect : '/api/home',\n            failureRedirect : '/api/login'\n    }));\n    \n\n\n\n// application -------------------------------------------------------------\nrouter.route('*')\n    .get( function(req, res) {\n\t//res.sendFile(__dirname +'/'+ 'app/index.html'); // load the single view file (angular will handle the page changes on the front-end)\n    res.render(__dirname +'/'+ 'src/front/views/index.ejs'); // load the single view file (angular will handle the page changes on the front-end)\n    \n});\n\napp.use('/api', router);\n\n\n    app.use(function(req, res, next){\n  res.status(404);\n  \n  // respond with html page\n  if (req.accepts('html')) {\n    // res.render('login', { url: req.url });\n     res.redirect('/api/login');\n    return;\n  }\n\n  // respond with json\n  if (req.accepts('json')) {\n    res.send({ error: 'Not found' });\n    return;\n  }\n\n  // default to plain-text. send()\n  res.type('txt').send('Not found');\n}); \n\napp.use(function(err, req, res, next){\n  // we may use properties of the error object\n  // here and next(err) appropriately, or if\n  // we possibly recovered from the error, simply next().\n  res.status(err.status || 500);\n  res.render('500', { error: err });\n});\n\n//--------------------------------START SERVER ON DEDICATED PORT---------------------------------------------//\nserver.listen(process.env.PORT, process.env.IP,function(){\n    console.log(\"http server listening on port: \",server.address().port, server.address().address);\n});\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n/*******************working with serialport**********************************/\n/*\nserialPort.on('open',function() {\n console.log('serialport opened');\n serialPort.on('data', function (data) {\n console.log(data);\n });\n        console.log('port opened');\n        arduinoModel.getSerialData(function(data){\n            console.log('inside arduino callback');\n            //socket.emit('serialData', {message: data});\n        });\n    });\n\n\n});\n*/\n\n/*********  working with Promises  ********************\n\nvar f = function(state){\n        return state;\n};\n\n\nvar promise = when.promise(function(resolve, reject, notify){\n\n    //do something async\n    var result = f('false');\n    try {\n        if (result === 'true') {\n            resolve(result);\n        }else{\n            reject(result);\n        }\n    }catch(e){\n        //catch other error\n        reject(e);\n    }\n\n});\nvar fulfiled = function(value){\n    console.log('fulfilled: ',value);\n};\nvar rejected = function(err){\n    console.log('called on rejected: ',err);\n};\nvar followingpromise = promise\n    .then(function(data){\n        console.log('fulfiled: ',data);\n    })\n    /*\n    .catch(function(err){\n        console.log('rejected: ',err);\n    });\n    \n    .catch(function(err){\n        rejected(err);\n    });\n*/\n","undoManager":{"mark":-2,"position":0,"stack":[[{"start":{"row":3,"column":69},"end":{"row":4,"column":43},"action":"remove","lines":[",","    flash        = require('connect-flash')"],"id":5726,"ignore":true},{"start":{"row":3,"column":70},"end":{"row":4,"column":0},"action":"insert","lines":["",""]},{"start":{"row":6,"column":0},"end":{"row":7,"column":0},"action":"remove","lines":["    ",""]},{"start":{"row":23,"column":0},"end":{"row":24,"column":0},"action":"insert","lines":["    flash        = require('connect-flash'),",""]},{"start":{"row":26,"column":0},"end":{"row":26,"column":17},"action":"remove","lines":["app.use(flash());"]},{"start":{"row":154,"column":0},"end":{"row":154,"column":3},"action":"remove","lines":["// "]},{"start":{"row":155,"column":3},"end":{"row":155,"column":6},"action":"remove","lines":[" //"]},{"start":{"row":157,"column":0},"end":{"row":157,"column":3},"action":"remove","lines":["// "]},{"start":{"row":158,"column":3},"end":{"row":158,"column":6},"action":"remove","lines":[" //"]},{"start":{"row":158,"column":27},"end":{"row":164,"column":10},"action":"remove","lines":["","    "," router.get('/login', function(req, res) {","","        // render the page and pass in any flash data if it exists","        res.render('login.ejs', { message: req.flash('loginMessage') }); ","    });   "]},{"start":{"row":161,"column":4},"end":{"row":161,"column":7},"action":"remove","lines":["// "]},{"start":{"row":164,"column":37},"end":{"row":166,"column":7},"action":"remove","lines":[",","        failureFlash : true // allow flash messages","       "]},{"start":{"row":195,"column":8},"end":{"row":195,"column":29},"action":"remove","lines":[" ensureAuthenticated,"]},{"start":{"row":196,"column":7},"end":{"row":196,"column":28},"action":"remove","lines":[" ensureAuthenticated,"]},{"start":{"row":246,"column":0},"end":{"row":246,"column":3},"action":"remove","lines":["// "]},{"start":{"row":247,"column":0},"end":{"row":247,"column":3},"action":"remove","lines":["// "]},{"start":{"row":249,"column":0},"end":{"row":249,"column":3},"action":"remove","lines":["// "]},{"start":{"row":250,"column":0},"end":{"row":250,"column":3},"action":"remove","lines":["// "]},{"start":{"row":251,"column":0},"end":{"row":251,"column":3},"action":"remove","lines":["// "]},{"start":{"row":252,"column":0},"end":{"row":252,"column":3},"action":"remove","lines":["// "]},{"start":{"row":253,"column":0},"end":{"row":253,"column":3},"action":"remove","lines":["// "]},{"start":{"row":254,"column":0},"end":{"row":254,"column":2},"action":"remove","lines":["//"]},{"start":{"row":254,"column":2},"end":{"row":254,"column":3},"action":"remove","lines":[" "]},{"start":{"row":256,"column":0},"end":{"row":256,"column":3},"action":"remove","lines":["// "]},{"start":{"row":257,"column":0},"end":{"row":257,"column":3},"action":"remove","lines":["// "]},{"start":{"row":258,"column":0},"end":{"row":258,"column":3},"action":"remove","lines":["// "]},{"start":{"row":259,"column":0},"end":{"row":259,"column":2},"action":"remove","lines":["//"]},{"start":{"row":259,"column":4},"end":{"row":259,"column":5},"action":"remove","lines":[" "]},{"start":{"row":260,"column":0},"end":{"row":260,"column":3},"action":"remove","lines":["// "]},{"start":{"row":262,"column":0},"end":{"row":262,"column":3},"action":"remove","lines":["// "]},{"start":{"row":263,"column":0},"end":{"row":263,"column":2},"action":"remove","lines":["//"]},{"start":{"row":263,"column":2},"end":{"row":263,"column":3},"action":"remove","lines":[" "]},{"start":{"row":264,"column":0},"end":{"row":264,"column":3},"action":"remove","lines":["// "]},{"start":{"row":266,"column":0},"end":{"row":266,"column":3},"action":"remove","lines":["// "]},{"start":{"row":267,"column":0},"end":{"row":267,"column":3},"action":"remove","lines":["// "]},{"start":{"row":268,"column":0},"end":{"row":268,"column":3},"action":"remove","lines":["// "]},{"start":{"row":269,"column":0},"end":{"row":269,"column":3},"action":"remove","lines":["// "]},{"start":{"row":270,"column":0},"end":{"row":270,"column":3},"action":"remove","lines":["// "]},{"start":{"row":271,"column":0},"end":{"row":271,"column":2},"action":"remove","lines":["//"]},{"start":{"row":271,"column":2},"end":{"row":271,"column":3},"action":"remove","lines":[" "]},{"start":{"row":272,"column":0},"end":{"row":272,"column":3},"action":"remove","lines":["// "]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":9,"column":19},"end":{"row":9,"column":19},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1440163197000}